<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ import namespace="System.Collections.Generic"  #>
using System.Reflection.Emit;
using System.Collections.Generic;
using Cil = Mono.Cecil.Cil;

namespace NJection.LambdaConverter.Mappers
{
    internal static class OpCodesMapper
    {
        private static readonly Dictionary<string, OpCode> _opCodes = new Dictionary<string, OpCode>();
		
		static OpCodesMapper()
        {
<# 			
			var opCodesFields = typeof(OpCodes).GetFields();
				
			foreach (var item in opCodesFields)
			{#>
			_opCodes.Add("<#= item.Name#>", OpCodes.<#=item.Name#>);
<#
			}
		PopIndent();
#>		}
		
		internal static OpCode Map(Cil.OpCode cecilOpCode)
        {		
			OpCode opCode;
			
			if (!_opCodes.TryGetValue(cecilOpCode.Code.ToString(), out opCode))
			{
				opCode = OpCodes.Nop;
			}
			
            return opCode;
        }
    }
}